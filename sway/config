# Default config for sway
# Read `man 5 sway` for a complete reference.

#disable XWayland entirely and run a "pure" Wayland session
xwayland disable

# Logo key .ie widows key. Use Mod1 for Alt.
set $mod Mod4
set $AltMod Mod1

### Input configuration
input * {
  tap enabled
  drag enabled
  natural_scroll enabled
  middle_emulation enabled
  click_method clickfinger
  click_method button_areas
  # set mouse sensitivity (between -1 and 1)
  pointer_accel 0.5
  #Set compose key as right alt
  #for feather reading man 7 xkeyboard-config
  xkb_options compose:ralt
}

#hide mouse on inactivity
seat * hide_cursor 10000
seat * hide_cursor when-typing enable

### Output configuration
# Example configuration:
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Set random wallpaper
set $wallpapers_path $HOME/files/Pictures/Code
output * bg $(find $wallpapers_path -type f | shuf -n 1) fill

### Idle configuration
#NOTE: if using systemd,configure logind.conf's IdleAction and IdleActionSec to tell systemd what action to execute when idle
#        and after what time the system is assumed to be in an idle state which swayidle notifies systemd with idlehint <timeout>

# From my configuration this will lock your screen after 300 seconds of inactivity with a wallpaper, then turn off
# your displays after another 300 seconds,notify systemd that the system is idle after 180 seconds, and based on the
# configuration in https://github.com/Ultra-Code/dotfiles/blob/master/archlinux/systemd/logind.conf#L39 execute hybrid-sleep
# after 7min of inactivity and when resuming from inactivity turn your screens back on.
# It will also lock your screen before your computer goes to sleep.
exec swayidle -w \
            timeout 300 'swaylock -f -i ~/files/Pictures/Code/27106459-coding-wallpapers.png' \
            timeout 600 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' \
            before-sleep 'swaylock -f -i ~/files/Pictures/Code/27106459-coding-wallpapers.png' \
            after-resume 'swaymsg "output * dpms on"' \
            idlehint 780

# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.

### Key bindings
#
# Basics:
#
# Kill focused window
bindsym $mod+Shift+q kill

# Drag floating windows by holding down $mod and left mouse button.
# Resize them with right mouse button + $mod.
# Despite the name, also works for non-floating windows.
# Change normal to inverse to use left mouse button for resizing and right
# mouse button for dragging.
floating_modifier $mod normal

# Reload the configuration file
bindsym $mod+r reload

# Moving around:
# Move your focus around
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# Move the focused window with the same, but add Shift
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# Layout stuff:
#
# You can "split" the current object of your focus with
# $mod+h or $mod+v, for horizontal and vertical splits
# respectively.
bindsym $mod+v split toggle

# Switch the current container between different layout styles
bindsym $mod+s layout stacking
bindsym $mod+t layout tabbed
bindsym $mod+slash layout toggle all

# Make the current focus fullscreen
bindsym $mod+f fullscreen toggle

# inhibit idle for all views when in fullscreen
for_window [app_id=".*"] inhibit_idle fullscreen

# Toggle the current focus between tiling and floating mode
bindsym $mod+space floating toggle

# Moves focus between the floating and tiled layers
bindsym $mod+Shift+space focus mode_toggle

# Move focus to the parent container
bindsym $mod+p focus parent

#Focus
focus_follows_mouse yes

# Window borders
# Set default border style for new tiled windows.
# NOTE: having boaders allow you to resize window without having to use float_mod + right_click
default_border pixel 3
# Set default border style for new floating windows. This only applies to windows
#that are spawned in floating mode, not windows that become floating afterwards.
default_floating_border none
#hide the title bar on tabbed and stacked containers with one child
hide_edge_borders --i3 smart


# Scratchpad:
#
# Sway has a "scratchpad", which is a bag of holding for windows.
# You can send windows there and get them back later.

# Move the currently focused window to the scratchpad
bindsym $mod+minus move scratchpad

# Show the next scratchpad window or hide the focused scratchpad window.
# If there are multiple scratchpad windows, this command cycles through them.
bindsym $mod+Shift+minus scratchpad show

#Audio
bindsym XF86AudioRaiseVolume exec pactl set-sink-volume @DEFAULT_SINK@ +1%
bindsym XF86AudioLowerVolume exec pactl set-sink-volume @DEFAULT_SINK@ -1%
bindsym XF86AudioMute exec pactl set-sink-mute @DEFAULT_SINK@ toggle
bindsym XF86AudioMicMute exec pactl set-source-mute @DEFAULT_SOURCE@ toggle

#Media keys
bindsym XF86AudioPlay  exec "mpc toggle"
bindsym XF86AudioStop  exec "mpc stop"
bindsym XF86AudioNext  exec "mpc next"
bindsym XF86AudioPrev  exec "mpc prev"
bindsym XF86AudioPause exec "mpc pause"

#To allow a keybinding to be executed while the lockscreen is active
bindsym --locked XF86AudioPlay exec "mpc toggle"
bindsym --locked XF86AudioNext  exec "mpc next"
bindsym --locked XF86AudioPrev  exec "mpc prev"

# Brightness
bindsym XF86MonBrightnessDown exec brightnessctl set 1%-
bindsym XF86MonBrightnessUp exec brightnessctl set +1%


# Workspaces:
#
# Switch to workspace
# alt-icon 
set $terminal    "1:  "
set $coding      "2:  "
 # 龜
set $browser     "3:  "
set $documents   "4:  "
# 
set $filemanager "5:  "
# 
set $mpv         "6:  "
# 
set $utility     "7:  "
set $downloads   "8:  "
# 
set $chating     "9:  "
bindsym $mod+1 workspace $terminal
bindsym $mod+2 workspace $coding
bindsym $mod+3 workspace $browser
bindsym $mod+4 workspace $documents
bindsym $mod+5 workspace $filemanager
bindsym $mod+6 workspace $mpv
bindsym $mod+7 workspace $utility
bindsym $mod+8 workspace $downloads
bindsym $mod+9 workspace $chating
bindsym $mod+0 workspace 10
bindsym $mod+Shift+Tab workspace prev
bindsym $mod+Tab workspace next

# Note: workspaces can have any name you want, not just numbers.
# We just use 1-10 as the default.
# Move focused container to workspace
bindsym $mod+Shift+1 move container to workspace $terminal
bindsym $mod+Shift+2 move container to workspace $coding
bindsym $mod+Shift+3 move container to workspace $browser
bindsym $mod+Shift+4 move container to workspace $documents
bindsym $mod+Shift+5 move container to workspace $filemanager
bindsym $mod+Shift+6 move container to workspace $mpv
bindsym $mod+Shift+7 move container to workspace $utility
bindsym $mod+Shift+8 move container to workspace $downloads
bindsym $mod+Shift+9 move container to workspace $chating
bindsym $mod+Shift+0 move container to workspace 10
bindsym $mod+period  move container to workspace next
bindsym $mod+comma   move container to workspace prev

for_window [app_id="firefox" title="About Mozilla Firefox|Picture-in-Picture|Password Required - Mozilla Firefox|Page Info — (.*)|Firefox — Sharing Indicator"] floating enable,border none
for_window [app_id="firefox"] focus,layout tabbed
assign [app_id="firefox"]  $browser
bindsym $mod+b exec firefox

for_window [app_id="terminal"] focus
assign [app_id="terminal"] $terminal
# Your preferred terminal emulator
set $term kitty --class "terminal" --single-instance
# Start a terminal
bindsym $mod+Return exec $term

for_window [app_id="coding"] focus
assign [app_id="coding"] $coding
set $megacode kitty --class "coding" --title "programming mode" --session $DOTFILES/kitty/session.conf
bindsym $mod+Shift+Return exec $megacode

for_window [app_id="mpv"] focus,fullscreen enable
assign [app_id="mpv"] $mpv

for_window [app_id="libreoffice-*"] focus
assign [app_id="libreoffice-*"] $documents

for_window [app_id="FBReader"] focus,fullscreen enable
assign [app_id="FBReader"] $documents

for_window [app_id="imv"] focus,fullscreen enable
assign [app_id="imv"] $utility

# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
for_window [app_id="menu_launcher"] floating enable, resize set width 1000 px height 150 px,move position 0 px 0 px,focus
set $menu $term --class "exe_launcher" --title "launcher" zsh -c "printenv PATH | xargs -d : -I {} -r find -L {} -maxdepth 1 -type f -executable -printf '%f\n' 2>/dev/null| sort -u | fzf | xargs -r swaymsg -t command exec"

for_window [app_id="desktop_laucher"] focus, floating enable , resize set width 45 ppt height 30 ppt, move position 30 ppt 5ppt,border none
set $menu_desktop $term --class "desktop_laucher" --title "launcher" \
        zsh -c "sleep 0.01;find /usr/share/applications -name '*.desktop' | xargs basename -s '.desktop' | \
        fzf --no-multi --height 100% --layout reverse-list --margin 3% --padding 3% --info hidden \
        --header-first --header '\t\t\t\t\t sway desktop app launcher' \
        --prompt 'desktop launcher> ' | \
        xargs -r swaymsg -t command exec gtk-launch"

# Start your launcher
bindsym $mod+a exec $menu_desktop

#NOTE: if ^G is to be used then zsh -c "nnn;$SHELL" this is to execute nnn -are in the zsh -c then start a SHELL in
# the background so ^G will cd to your last dir in the background SHELL
# and for the Exec in nnn.desktop $term --class "nnn" --title "file manager" zsh -c "nnn %f"
for_window [app_id="lf"] focus
assign [app_id="lf"] $filemanager
set $file_manager kitty --class "lf" --title "file manager" zsh -c 'lf'
bindsym $mod+e exec $file_manager

for_window [app_id="todo" title="todo list"] floating enable,sticky enable,resize set width 45 ppt height 75 ppt, move position 27 ppt 7ppt
set $todo $term --class "todo" --title "todo list" zsh -c "sleep 0.05;$EDITOR ~/.local/neorg/todos/todo.norg"
bindsym $mod+l exec $todo


# Resizing containers:

mode "resize" {
# left will shrink the containers width
# right will grow the containers width
# up will grow the containers height
# down will shrink the containers height

bindsym Left resize shrink width 10px
bindsym Down resize shrink height 10px
bindsym Up resize grow height 10px
bindsym Right resize grow width 10px

# Return to default mode
bindsym Return mode "default"
bindsym Escape mode "default"
}
bindsym $AltMod+r mode "resize"

set $scree_shot_sound paplay /usr/share/sounds/freedesktop/stereo/screen-capture.oga

#Take screenshot of a window
bindsym --release Print exec grim $HOME/files/Pictures/"Captura de pantalla de $(date +%F_%X).png" && $scree_shot_sound
#Take a screenshot of a region of a window
bindsym --release Shift+Print exec grim -g "$(slurp)" $HOME/files/Pictures/"Captura de pantalla de $(date +%F_%X).png" && $scree_shot_sound
#Take a screenshot and copy to clipboard
bindsym --release Control+Print exec grim - | wl-copy  && $scree_shot_sound

# Status Bar:
# Read `man 5 sway-bar` for more information about this section.
bar {
    position top
    workspace_buttons yes
    separator_symbol "|"
    # Keep in mind that the current directory of this config file is $HOME
    status_command ~/.config/sway/status.zsh
    mode invisible
    colors {
        # Text color of status bar
        statusline #ffffff
        # Background of status bar
        background #323232
        # Separator color
        separator   #ffffff

        focused_workspace  #4c7899 #285577 #ffffff
        active_workspace   #333333 #5f676a #ffffff
        #sway default for inactive workspaces
        inactive_workspace #32323200 #32323200 #5c5c5c
        urgent_workspace   #2f343a #900000 #ffffff
        binding_mode       #2f343a #900000 #ffffff
    }
}

#Use 'swaymsg -t get_bar_config' to get the available bar
#binding to disable swaybar
bindsym $mod+shift+w bar mode invisible

#binding to enable swaybar
bindsym $mod+w bar mode dock

# binding to enable and disable gammastep
bindsym $mod+g exec systemctl --user start gammastep
bindsym $mod+Shift+g exec systemctl --user stop gammastep

# Font
# Check https://docs.gtk.org/Pango/type_func.FontDescription.from_string.html#description for description of the
# pango font format

font pango:Iosevka Nerd Font Mono Normal Medium 11

#GTK+ ui settings
set $gnome-schema org.gnome.desktop.interface

exec_always {
    #style gtk apps with Adwaita dark variant
    gsettings set $gnome-schema gtk-theme 'Adwaita-dark'
    gsettings set $gnome-schema icon-theme 'Adwaita'
    gsettings set $gnome-schema cursor-size 24
    gsettings set $gnome-schema cursor-theme 'Adwaita'
    gsettings set $gnome-schema font-name 'Iosevka Nerd Font Mono Normal Medium 11'
    gsettings set $gnome-schema monospace-font-name 'Iosevka Nerd Font Mono Normal Medium 11'
    gsettings set $gnome-schema document-font-name 'Iosevka Nerd Font Mono Normal Medium 11'
    gsettings set $gnome-schema color-scheme 'prefer-dark'
}

set $power_mangement "(s)uspend,(h)ybrid-sleep,suspend-(t)hen-hibernate,h(i)bernate,(l)ock,(e)xit,(r)eboot,(R)UEFI,(S)hutdown"
mode $power_mangement {
    bindsym s exec systemctl suspend,mode "default"
    bindsym h exec  systemctl hybrid-sleep,mode "default"
    bindsym t exec swaynag -t warning -m 'Sleepy time?!?!' -b 'ZzZz...' 'systemctl suspend-then-hibernate' -s "No",mode "default"
    bindsym i exec systemctl hibernate,mode "default"
    bindsym l exec swaylock -i ~/files/Pictures/Code/27106459-coding-wallpapers.png,mode "default"
    # Exit sway (logs you out of your Wayland session)
    bindsym e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -b 'Yes, exit sway' 'swaymsg exit' -s "No",mode "default"
    bindsym r exec  systemctl reboot,mode "default"
    bindsym Shift+r exec  systemctl reboot --firmware-setup,mode "default"
    bindsym Shift+s exec  systemctl poweroff -i,mode "default"

    # return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $AltMod+p mode $power_mangement

set $wifi "(w)ifi (s)can Wifi (o)ff"
mode $wifi {
    bindsym w exec rfkill toggle wlan,mode "default"
    bindsym o exec rfkill block all,mode "default"
    bindsym s exec iwctl station wlan0 scan,mode "default"

    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $AltMod+w mode $wifi

set $bluetooth "(b)luetooth (s)can bluetooth (o)ff"
mode $bluetooth {
    bindsym b exec rfkill toggle bluetooth,mode "default"
    bindsym o exec rfkill block all,mode "default"
    bindsym s exec bluetoothctl -- connect 41:42:AB:B9:CA:65,mode "default"

    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $AltMod+b mode $bluetooth

# Include sway systemd configuration and environment variables
include /etc/sway/config.d/*

# Autostart
# start sway target
exec systemctl --user start sway-session.target
