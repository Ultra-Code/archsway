#INFO:https://www.baeldung.com/linux/file-system-caching

#The absolute maximum amount of system memory that can be filled with dirty pages before everything
#must get committed to disk. When the system gets to this point all new I/O blocks until dirty pages
#have been written to disk. This is often the source of long I/O pauses, but is a safeguard against
#too much data being cached unsafely in memory
vm.dirty_ratio = 30

#the percentage of system memory that can be filled with “dirty” pages — memory pages that still need to
#be written to disk — before the pdflush/flush/kdmflush background processes kick in to write it to disk
vm.dirty_background_ratio = 15

#Decreasing the virtual file system (VFS) cache parameter value may improve system responsiveness
#The value controls the tendency of the kernel to reclaim the memory which is used for caching of
#directory and inode objects (VFS cache)
vm.vfs_cache_pressure = 30

#how long something can be in cache before it needs to be written. In this case it’s 5 minutes.
#When the pdflush/flush/kdmflush processes kick in they will check to see how old a dirty page is,
#and if it’s older than this value it’ll be written asynchronously to disk. Since holding a dirty
#page in memory is unsafe this is also a safeguard against data loss
vm.dirty_expire_centisecs = 30000

#how often the pdflush/flush/kdmflush processes wake up and check to see if work needs to be done
#Increasing the virtual memory dirty writeback time helps to aggregate disk I/O together,
#thus reducing spanned disk writes, and increasing power saving
#To do the same for journal commits on supported filesystems (e.g. ext4, btrfs...),
#use commit=300 as a option in fstab.
vm.dirty_writeback_centisecs = 30000
# vim: set filetype=sysctl:
