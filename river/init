#!/usr/bin/luajit

local getenv = os.getenv
local fmt = string.format
local exec = os.execute

--trim leading and trailling whitespaces
local function trim(str)
	return str:gsub("^%s*(.-)%s*$", "%1")
end

---@return string
---@param cmd string
---@nodiscard
local function popen(cmd)
	local handle = assert(io.popen(cmd))
	---@type string
	local output = handle:read("*a")
	output = trim(output)
	handle:close()
	return output
end

-- convert `cmd`'s input command weather table or list to string
---@return string
---@param command table<string>|string is the command
---@param sep string? seperator is set by default to " "
---@param i integer? start index
---@param j integer? end index
---@nodiscard
local function cmd(command, sep, i, j)
	if type(sep) == "nil" then
		sep = " "
	end

	if type(command) == "table" then
		return table.concat(command, sep, i, j)
	else
		return tostring(command)
	end
end

--  Helper fuction to only spawn a program when no instance of it is running
--  already, so init can be re-run without all widgets being duplicated.
---@param command string
local function spawn_once(command)
	local program = string.match(command, "^%w+")

	---@return boolean
	---@param program_name string
	local function is_not_spawned(program_name)
		local is_running =
			popen(fmt("if pgrep %s >/dev/null 2>&1 ; then echo 'true' ; else echo 'false' ; fi", program_name))

		local stringtoboolean = { ["true"] = true, ["false"] = false }
		return not stringtoboolean[is_running]
	end

	local is_not_running = is_not_spawned(program)
	if is_not_running then
		exec(fmt("riverctl spawn '%s'", command))
	end
end

-- Set Variables
-- variable to store virtual terminal number
local vtnr = getenv("XDG_VTNR")

-- Your preferred terminal emulator
local terminal = "kitty --single-instance  --instance-group " .. vtnr

local HOME = getenv("HOME")

-- Path to a collection of wallpapers
local wallpapers_path = HOME .. "/files/Pictures/Code/"

local wallpaper = wallpapers_path .. popen("ls " .. wallpapers_path .. " | shuf -n 1")

-- local lock_screen_wallpaper = wallpapers_path .. "Talk-Is-Cheap-Show-Me-The-Code.png"
-- local swaylock = fmt([["swaylock --daemonize --image %s"]], lock_screen_wallpaper)
local waylock = "waylock"

local screenshot_path = HOME .. '/files/Pictures/Screenshot/Captura-de-pantalla-de_"$(date +%F_%X)".png'

-- wpctl's -l flag is to prevent the volume from exceeding/surpass 160% == 1.6
local max_volume = 1.6

-- Sound for screenshot
local screen_shot_sound = "/usr/share/sounds/freedesktop/stereo/screen-capture.oga"

-- File manger
local file_manager = "lf"

-- Menu Launcher
local desktop_launcher = fmt([[fuzzel --terminal "%s" --lines 25 --width 54 --show-actions]], terminal)
local fuzzel_menu = fmt([[fuzzel --terminal "%s" --lines 25 --width 90 --dmenu]], terminal)

local status_bar = "levee pulse backlight battery"

local autostarts = {
	{ "systemctl --user set-environment XDG_CURRENT_DESKTOP=river" },
	{ "systemctl --user import-environment DISPLAY WAYLAND_DISPLAY XDG_CURRENT_DESKTOP" },
	{ "dbus-update-activation-environment --systemd DISPLAY WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=river" },
	-- Startup programs
	-- stylua: ignore
	{
		"swayidle", "-w",
		"timeout", "300", waylock,
		"before-sleep", waylock,
		"idlehint", "780",
	},
	{ "swaybg", "--mode", "fill", "--image", wallpaper },
	-- { status_bar }, # don't run status bar on startup
	-- wlsunset -t 2500 -T 6500 -l 5.5502 -L -0.2174 -S 07:00 -s 18:00 -d 1800 -g 1.0
	{ "wlsunset", "-t 2500", "-l 5.5502", "-L -0.2174" },
	{ "wl-paste", "--watch", "cliphist", "store" },
	{ "batsignal", "-b", "-e", "-w 35", "-c 18", "-d 12", "-f 85", "-m 180", "-D systemctl suspend" },
}

-- Run startup commands
---@param autostart_commands table<table<string>>
local function run_autostarts(autostart_commands)
	for _, commands in ipairs(autostart_commands) do
		exec(fmt([[riverctl spawn '%s']], cmd(commands)))
	end
end

local oneshot_commands = {
	{ "kanshi" },
}

-- run programs that need to be executed only once
---@param oneshot_programs table<integer,table>
local function run_oneshots(oneshot_programs)
	for _, command in ipairs(oneshot_programs) do
		spawn_once(cmd(command))
	end
end

local inputs = {
	["pointer-2-14-ETPS/2_Elantech_Touchpad"] = {
		["events"] = "disabled-on-external-mouse",
		["drag"] = "enabled",
		["tap"] = "enabled",
		["tap-button-map"] = "left-right-middle",
		["disable-while-typing"] = "enabled",
		["natural-scroll"] = "enabled",
		["scroll-method"] = "two-finger",
	},
}

-- Configure input devices
local function configure_inputs(input_options)
	for device, options in pairs(input_options) do
		for key, val in pairs(options) do
			exec(fmt("riverctl input %s %s %s", device, key, val))
		end
	end
end

local river_options = {
	["set-repeat"] = { 50, 300 },
	["focus-follows-cursor"] = "normal",
	["hide-cursor"] = "when-typing enabled",
	["set-cursor-warp"] = "on-output-change",
	["attach-mode"] = "top",
	["default-layout"] = "rivertile",

	-- Theme options
	["border-width"] = 0,
	["border-color-focused"] = "0xeceff4",
	["border-color-unfocused"] = "0x81a1c1",
	["border-color-urgent"] = "0xbf616a",
	["xcursor-theme"] = { "Adwaita", 24 },
	["background-color"] = "0x2e3440",
}

-- Set river's options
local function set_river_options(river_ui_options)
	for key, value in pairs(river_ui_options) do
		exec(fmt("riverctl %s %s", key, cmd(value)))
	end
end

local gsettings = {
	["org.gnome.desktop.interface"] = {
		["gtk-theme"] = "Adwaita-dark",
		["icon-theme"] = "Adwaita",
		["cursor-theme"] = river_options["xcursor-theme"][1],
		["cursor-size"] = river_options["xcursor-theme"][2],
		["color-scheme"] = "prefer-dark",
	},
}

-- GNOME-related settings
local function set_gnome_settings(gnome_settings)
	for group, tbl in pairs(gnome_settings) do
		for key, value in pairs(tbl) do
			exec(fmt("gsettings set %s %s %s", group, key, value))
		end
	end
end

--TODO: consider simplifying mapping with custom modes https://wiki.archlinux.org/title/River#Modes
-- Each mapping contains 4 keys:
-- mod: string|list (modifiers, concanated by '+')
-- key: string
-- command: string|list (the command passed to riverctl)
-- opt: string ('release' or 'repeat')
local mappings = {
	-- Key bindings
	map = {
		normal = {
			-- Terminal emulators
			{
				mod = "Super",
				key = "T",
				command = { "spawn", fmt([['%s']], terminal) },
			},
			{
				mod = { "Super", "Shift" },
				key = "Return",
				command = { "spawn", fmt([['%s --class "coding"']], terminal) },
			},
			-- clear notifications
			{
				mod = { "Super" },
				key = "U",
				command = {
					"spawn",
					[['makoctl dismiss --all']],
				},
			},
			{
				mod = { "Super" },
				key = "R",
				command = {
					"spawn",
					[[~/.config/river/init]],
				},
			},
			{
				mod = { "Super" },
				key = "E",
				command = {
					"spawn",
					fmt([['%s --class "fm" --title "file manager" nu -c "%s"']], terminal, file_manager),
				},
			},
			-- Browser
			{
				mod = { "Super" },
				key = "B",
				command = { "spawn", [[firefox]] },
			},
			-- Application launcher
			{
				mod = "Super",
				key = "D",
				command = { "spawn", fmt([['%s']], desktop_launcher) },
			},
			-- Clipboard management with cliphist
			{
				mod = { "Super", "Alt" },
				key = "C",
				command = { "spawn", fmt([['cliphist list | %s | cliphist decode | wl-copy']], fuzzel_menu) },
			},
			{
				mod = { "Super", "Alt" },
				key = "D",
				command = { "spawn", fmt([['cliphist list | %s | cliphist delete']], fuzzel_menu) },
			},
			-- Take screenshot of a window
			{
				mod = "None",
				key = "Print",
				command = {
					"spawn",
					fmt([['grim "%s" ; pw-play %s']], screenshot_path, screen_shot_sound),
				},
			},
			-- Take a screenshot of a region of a window
			{
				mod = "Super",
				key = "Print",
				command = {
					"spawn",
					fmt([['grim -g "$(slurp)" "%s" ; pw-play %s']], screenshot_path, screen_shot_sound),
				},
			},
			-- Take a screenshot and copy to clipboard
			{
				mod = "Alt",
				key = "Print",
				command = { "spawn", fmt([['grim - | wl-copy ; pw-play %s']], screen_shot_sound) },
			},
			-- Super+Q to close the focused view
			{
				mod = "Super",
				key = "Q",
				command = "close",
			},
			-- Super+Shift+Q to exit river (requires 'swaynag' program from sway)
			{
				mod = { "Super", "Shift" },
				key = "Q",
				command = { "spawn", [['swaynag -t warning -m "Exit river?" -b "Yes" "riverctl exit" -s "No"']] },
			},
			-- Super+Shift+X to lock the screen
			{
				mod = { "Super", "Shift" },
				key = "X",
				command = { "spawn", fmt("%s", waylock) },
			},
			-- toggle showing status bar
			{
				mod = { "Super", "Shift" },
				key = "B",
				command = {
					"spawn",
					fmt(
						[["if pgrep %s ; then pkill %s ; else %s & fi"]],
						string.match(status_bar, "^%w+"),
						string.match(status_bar, "^%w+"),
						status_bar
					),
				},
			},
			-- Super+{J,K} to focus next/previous view in the layout stack
			{
				mod = "Super",
				key = "J",
				command = { "focus-view", "previous" },
			},
			{
				mod = "Super",
				key = "K",
				command = { "focus-view", "next" },
			},
			-- Super+Shift+{J,K} to swap focused view with the next/previous view in the layout stack
			{
				mod = { "Super", "Shift" },
				key = "J",
				command = { "swap", "previous" },
			},
			{
				mod = { "Super", "Shift" },
				key = "K",
				command = { "swap", "next" },
			},
			-- Super+{P,N} to focus next/previous output
			{
				mod = "Alt",
				key = "P",
				command = { "focus-output", "previous" },
			},
			{
				mod = "Alt",
				key = "N",
				command = { "focus-output", "next" },
			},
			-- Super+Shift+{P,N} to send the focused view to next/previous output
			{
				mod = { "Alt", "Shift" },
				key = "P",
				command = { "send-to-output", "previous" },
			},
			{
				mod = { "Alt", "Shift" },
				key = "N",
				command = { "send-to-output", "next" },
			},
			-- Super+Shift+E to bump the focused view to the top of the layout stack
			{
				mod = { "Super", "Shift" },
				key = "E",
				command = "zoom",
			},
			-- Super+{H,L} to decrease/increase the main_factor value of rivertile by 0.02
			{
				mod = "Super",
				key = "H",
				command = { "send-layout-cmd", "rivertile", [['main-ratio -0.02']] },
			},
			{
				mod = "Super",
				key = "L",
				command = { "send-layout-cmd", "rivertile", [['main-ratio +0.02']] },
			},
			-- Super+Shift+{H,L} to increment/decrement the main_count value of rivertile
			{
				mod = { "Super", "Shift" },
				key = "H",
				command = { "send-layout-cmd", "rivertile", [['main-count +1']] },
			},
			{
				mod = { "Super", "Shift" },
				key = "L",
				command = { "send-layout-cmd", "rivertile", [['main-count -1']] },
			},
			-- Control+Alt+{H,J,K,L} ie control in which direction the main area is positioned
			{
				mod = { "Control", "Alt" },
				key = "H",
				command = { "send-layout-cmd", "rivertile", [['main-location left']] },
			},
			{
				mod = { "Control", "Alt" },
				key = "J",
				command = { "send-layout-cmd", "rivertile", [['main-location bottom']] },
			},
			{
				mod = { "Control", "Alt" },
				key = "K",
				command = { "send-layout-cmd", "rivertile", [['main-location top']] },
			},
			{
				mod = { "Control", "Alt" },
				key = "L",
				command = { "send-layout-cmd", "rivertile", [['main-location right']] },
			},
			-- Super+Alt+{H,J,K,L} to move views (floating)
			{
				mod = { "Super", "Alt" },
				key = "H",
				command = { "move", "left", 100 },
			},
			{
				mod = { "Super", "Alt" },
				key = "J",
				command = { "move", "down", 100 },
			},
			{
				mod = { "Super", "Alt" },
				key = "K",
				command = { "move", "up", 100 },
			},
			{
				mod = { "Super", "Alt" },
				key = "L",
				command = { "move", "right", 100 },
			},
			-- Super+Control+{H,J,K,L} to resize views (floating)
			{
				mod = { "Super", "Control" },
				key = "H",
				command = { "resize", "horizontal", -100 },
			},
			{
				mod = { "Super", "Control" },
				key = "J",
				command = { "resize", "vertical", 100 },
			},
			{
				mod = { "Super", "Control" },
				key = "K",
				command = { "resize", "vertical", -100 },
			},
			{
				mod = { "Super", "Control" },
				key = "L",
				command = { "resize", "horizontal", 100 },
			},
			-- Super+Alt+Control+{H,J,K,L} to snap views to screen edges (floating)
			{
				mod = { "Super", "Alt", "Control" },
				key = "H",
				command = { "snap", "left" },
			},
			{
				mod = { "Super", "Alt", "Control" },
				key = "J",
				command = { "snap", "down" },
			},
			{
				mod = { "Super", "Alt", "Control" },
				key = "K",
				command = { "snap", "up" },
			},
			{
				mod = { "Super", "Alt", "Control" },
				key = "L",
				command = { "snap", "right" },
			},
			-- Super+Space to toggle float
			{
				mod = "Super",
				key = "Space",
				command = "toggle-float",
			},
			-- Super+F to toggle fullscreen
			{
				mod = "Super",
				key = "F",
				command = "toggle-fullscreen",
			},
			-- Sets tags to their previous value on the currently focused output, allowing jumping back and forth between 2 tag setups.
			{
				mod = "Super",
				key = "Tab",
				command = "focus-previous-tags",
			},
			-- Assign the currently focused view the previous tags of the currently focused output.
			{
				mod = { "Super", "Shift" },
				key = "Tab",
				command = "send-to-previous-tags",
			},
		},
		locked = {
			-- Eject optical drives
			{
				mod = "None",
				key = "XF86Eject",
				command = { "spawn", [['eject -T']] },
			},
			-- Control pipewire volume
			{
				mod = "None",
				key = "XF86AudioRaiseVolume",
				command = {
					"spawn",
					fmt([['wpctl set-volume @DEFAULT_AUDIO_SINK@ 1%%+ -l  %i']], max_volume),
				},
				opt = "repeat",
			},
			-- To lower the volume
			{
				mod = "None",
				key = "XF86AudioLowerVolume",
				command = {
					"spawn",
					fmt([['wpctl set-volume @DEFAULT_AUDIO_SINK@ 1%%- -l  %i']], max_volume),
				},
				opt = "repeat",
			},
			-- #To mute/unmute the volume
			{
				mod = "None",
				key = "XF86AudioMute",
				command = { "spawn", [['wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle']] },
			},
			-- #To mute/unmute the microphone
			{
				mod = "None",
				key = "XF86AudioMicMute",
				command = { "spawn", [['wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle']] },
			},
			-- Control MPRIS aware media players with 'mpc'
			{
				mod = "None",
				key = "XF86AudioStop",
				command = { "spawn", [['mpc stop']] },
			},
			{
				mod = "None",
				key = "XF86AudioPause ",
				command = { "spawn", [['mpc pause']] },
			},
			{
				mod = "None",
				key = "XF86AudioPlay",
				command = { "spawn", [['mpc toggle']] },
			},
			{
				mod = "None",
				key = "XF86AudioPrev",
				command = { "spawn", [['mpc prev']] },
			},
			{
				mod = "None",
				key = "XF86AudioNext",
				command = { "spawn", [['mpc next']] },
			},
			-- Control screen backlight brightness
			{
				mod = "None",
				key = "XF86MonBrightnessUp",
				command = { "spawn", [['brightnessctl set 1%%+']] },
				opt = "repeat",
			},
			{
				mod = "None",
				key = "XF86MonBrightnessDown",
				command = { "spawn", [['brightnessctl set 1%%-']] },
				opt = "repeat",
			},
		},
	},
	-- Mappings for pointer (mouse)
	["map-pointer"] = {
		normal = {
			-- Super + Left Mouse Button to move views
			{
				mod = "Super",
				key = "BTN_LEFT",
				command = "move-view",
			},
			-- Super + Right Mouse Button to resize views
			{
				mod = "Super",
				key = "BTN_RIGHT",
				command = "resize-view",
			},
		},
	},
}

-- Keyboard and mouse bindings
---@param mapping_options table<string,table<string,table>>
local function setup_mappings(mapping_options)
	for map_type, tbl in pairs(mapping_options) do
		for mode, value in pairs(tbl) do
			for _, binding in ipairs(value) do
				local modifiers = cmd(binding.mod, "+")
				local map_cmd = cmd(binding.command, " ")

				-- Options -release and -repeat for 'map' and 'unmap' commands
				local opt = binding.opt
				if opt == "release" or opt == "repeat" then
					opt = "-" .. opt
				else
					opt = ""
				end
				exec(fmt("riverctl %s %s %s %s %s %s", map_type, opt, mode, modifiers, binding.key, map_cmd))

				-- Duplicate mappings of mode 'locked' for mode 'normal'
				if mode == "locked" then
					exec(fmt("riverctl %s %s normal %s %s %s", map_type, opt, modifiers, binding.key, map_cmd))
				end
			end
		end
	end
end

---@alias  UserModes  {[string]: {enter:{mod:string,key:string},commands:({mod:string,key:string,command:string})[],exit:{mod:string,key:string}}}
---@type UserModes
local user_modes = {
	-- set $power_mangement "(s)uspend,hy(b)rid-sleep,(h)ibernate,(r)eboot,suspend-(t)hen-hibernate,(l)ock,(R)UEFI,(S)hutdown"
	power_management = {
		enter = {
			mod = "Super",
			key = "P",
		},
		commands = {
			{
				mod = "None",
				key = "S",
				command = "systemctl suspend",
			},
			{
				mod = "None",
				key = "T",
				command = [['swaynag -t warning -m "Sleepy time?!?!" -b "ZzZz..." "systemctl suspend-then-hibernate" -s "No"']],
			},
			{
				mod = "None",
				key = "B",
				command = "systemctl hybrid-sleep",
			},
			{
				mod = "None",
				key = "H",
				command = "systemctl hibernate",
			},
			{
				mod = "None",
				key = "R",
				command = "systemctl reboot",
			},
			{
				mod = "Shift",
				key = "R",
				command = "systemctl reboot --firmware-setup",
			},
			{
				mod = "Shift",
				key = "S",
				command = "systemctl poweroff -i",
			},
		},
		exit = {
			mod = "None",
			key = "Escape",
		},
	},
}

---@param user_declared_modes UserModes
local function setup_user_modes(user_declared_modes)
	for declared_mode, modes in pairs(user_declared_modes) do
		exec(fmt("riverctl declare-mode %s", declared_mode))

		local enter = modes.enter
		exec(fmt("riverctl map normal %s %s enter-mode %s", enter.mod, enter.key, declared_mode))

		local exit = modes.exit
		exec(fmt("riverctl map %s %s %s enter-mode normal", declared_mode, exit.mod, exit.key))

		for _, mode in ipairs(modes.commands) do
			exec(fmt('riverctl map %s %s %s spawn "%s"', declared_mode, mode.mod, mode.key, mode.command))
		end
	end
end

-- Additional modes and their mappings to switch between them and 'normal' mode
--
-- name: string (the name of the additional mode)
-- mod: string|list (modifiers for key binding, concanated by '+')
-- key: string
local modes = {
	{
		name = "passthrough",
		mod = "Super",
		key = "F11",
	},
}

-- Additional modes (beside 'normal' and 'locked')
---@param modes_option table<table<string,string>>
local function setup_modes(modes_option)
	for _, mode in ipairs(modes_option) do
		local mode_name = mode.name
		local modifiers = cmd(mode.mod, "+")

		-- Declare the mode
		exec("riverctl declare-mode " .. mode_name)

		-- Setup key bindings to enter/exit the mode
		exec(fmt("riverctl map normal %s %s enter-mode %s", modifiers, mode.key, mode_name))
		exec(fmt("riverctl map %s %s %s enter-mode normal", mode_name, modifiers, mode.key))
	end
end

-- Mappings for tag management
-- These mappings are repeated, so they are separated from the mappings table
local function tag_mappings()
	for i = 1, 9 do
		local tag_num = bit.lshift(1, i - 1) -- 1 << (i - 1)

		-- Super+[1-9] to focus tag [0-8]
		exec(fmt("riverctl map normal Super %s set-focused-tags %s", i, tag_num))

		-- Super+Shift+[1-9] to tag focused view with tag [0-8]
		exec(fmt("riverctl map normal Super+Shift %s set-view-tags %s", i, tag_num))

		-- Super+Control+[1-9] to toggle focus of tag [0-8]
		exec(fmt("riverctl map normal Super+Control %s toggle-focused-tags %s", i, tag_num))

		-- Super+Alt+[1-9] to toggle tag [0-8] of focused view
		exec(fmt("riverctl map normal Super+Alt %s toggle-view-tags %s", i, tag_num))
	end

	-- river has a total of 32 tags
	local all_tags = bit.lshift(1, 32) - 1 -- (1 << 32) - 1
	exec(fmt("riverctl map normal Super 0 set-focused-tags %s", all_tags))
	exec(fmt("riverctl map normal Super+Shift 0 set-view-tags %s", all_tags))
end

-- Mappings for scratchpad tag management
local function scratchpad_tag_mappings()
	-- The scratchpad will live on an unused tag. Which tags are used depends on your
	-- config, but rivers default uses the first 9 tags.
	local scratch_tags = bit.lshift(1, 23)

	-- Toggle the scratchpad with Super+S
	exec(fmt("riverctl map normal Super S toggle-focused-tags %s", scratch_tags))

	-- Send windows to the scratchpad with Super+Shift+S
	exec(fmt("riverctl map normal Super+Shift S set-view-tags %s", scratch_tags))

	-- Set spawn tagmask to ensure new windows don't have the scratchpad tag unless explicitly set.
	local all_but_scratch_tag = bit.bxor((bit.lshift(1, 32) - 1), scratch_tags)
	exec(fmt("riverctl spawn-tagmask %s", all_but_scratch_tag))
end

local window_rules = {
	["float-filter-add"] = {
		["app-id"] = {
			"float",
			"popup",
			"swappy",
			"pinentry-qt",
			"pavucontrol-qt",
		},
		["title"] = {
			"Picture-in-Picture",
			"About Mozilla Firefox",
			"Extension: (Bitwarden - Free Password Manager) - Bitwarden — Mozilla Firefox",
		},
	},
	["csd-filter-add"] = {
		["app-id"] = { "swappy" },
	},
}

-- Window rules (float/csd filters)
---@param window_ui_rules table<string,table<string,table>>
local function setup_winow_rules(window_ui_rules)
	for key, value in pairs(window_ui_rules) do
		for type, patterns in pairs(value) do
			for _, pattern in ipairs(patterns) do
				exec(fmt("riverctl %s %s '%s'", key, type, pattern))
			end
		end
	end
end

-- Apply settings ──
run_autostarts(autostarts)
configure_inputs(inputs)
set_river_options(river_options)
setup_winow_rules(window_rules)
setup_modes(modes)
setup_user_modes(user_modes)
set_gnome_settings(gsettings)
setup_mappings(mappings)
tag_mappings()
scratchpad_tag_mappings()
run_oneshots(oneshot_commands)

-- Launch the layout generator as the final initial process.
local ffi = require("ffi")
ffi.cdef([[
    int execl(const char *pathname, const char *arg, ... /*, (char *) NULL */);
]])

local execl = ffi.C.execl

execl(
	"/bin/rivertile",
	"rivertile",
	"-view-padding",
	"0",
	"-outer-padding",
	"0",
	"-main-location",
	"left",
	"-main-count",
	"1",
	"-main-ratio",
	"0.6"
)
