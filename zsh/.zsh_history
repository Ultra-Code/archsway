printenv ZDOTDIR
printenv SHELL
w
who
ping 1.1.1.1
ping 1.1.1.1 -c 10
ping 8.8.8.8 -c 10
mktemp
printenv $XDG_CONFIG_HOME
nix-env -iA nixpkgs.nix
sudo nix-env -e zig
nix-channel -u
nix-env -qa nixpkgs.zls
sudo chown ultracode:ultracode -R /nix/
nix-env -u --dry-run
$XDG_DATA_HOME/.oh-my-zsh
node --help
nix search -u zls
nix-env --description -qa '.*emacs.*'
nix-env -qaPA nixpkgs.emacs
nix repl
nix-env -qaA nixpkgs.zls
nix-env -qaA nixpkgs.boost
sh build2-install-0.14.0-a.0-stage.sh
nix-env --description -qaA nixpkgs.opengl
modinfo drm
bdep --help
bdep new -t exe opengl -A builds/debug/ @debug
clf
bdep init -A ../builds/sanitized/ @sanitized
sudo systemctl restart openvpn.service
sudo systemctl status openvpn.service
LTO=1 make -j 5 -v
make install
sudo make install
bdep new -t empty cpputils -A builds/debug/ @debug
bdep new -t empty -A builds/debug/ @debug cpputils
bdep new -t empty cpputils
bdep new --package -t lib,mxx=mxx,cxx=cxx,hxx=hxx,alt-naming,prefix=src,no-subdir fp
bdep new --package -l c++,mxx=mxx,cxx=cxx,hxx=hxx -t lib,alt-naming,prefix=src,no-subdir fp
bdep new --package -l c++,mxx=mxx,cxx=cxx,hxx=hxx -t lib,alt-naming,subdir=src,no-subdir fp
bdep new --package -l c++,mxx=mxx,cxx=cxx,hxx=hxx -t lib,alt-naming,subdir=src fp
bdep new --package -l c++,mxx=mxx,cxx=cxx,hxx=hxx -t lib,alt-naming,subdir=src utils
bdep new --package -l c++,mxx=mxx,cxx=cxx,hxx=hxx -t lib,alt-naming,subdir=src fs
bdep new --package -l c++,mxx=mxx,cxx=cxx,hxx=hxx -t lib,alt-naming,subdir=src net
bdep new --package -l c++,mxx=mxx,cxx=cxx,hxx=hxx -t lib,alt-naming,subdir=src eh
bdep new -A ../builds/debug/ @debug
bdep init -A ../builds/debug/ @debug
bdep new --package -l c++,mxx=mxx -t lib,alt-naming,subdir=src modular
objdump libfp.so
objdump -a libfp.so
objdump -rt libfp.so
readlink libfp.so
readelf libfp.so
readelf -a libfp.so
objdump -D libfp.so
nm -D -C libfp.so
nm -C libfp.so
c++filt _ZW19high_order_functionE4funciii
nm libfp.so
objdump -t libfp.so
readelf -aW libfp.so
objdump -DSWtr high_order_function.so.gcm.o
readelf -aW libho.so
g++ -std=c++2b -fPIC -c -x c++  module.cppm -o module.o
g++ main.cxx -L . -Wl,-rpath=. -lmodule
objdump -DSWtr module.o
nm -C libmodule.so
g++ -std=c++2b -fmodules-ts -fPIC -c -x c++  module.cppm -o module.o
nm libmodule.so |c++filt
nm libfp.so |c++filt
b install config.install.root=../../cpinstall/
b install config.install.root=/tmp/cpinstall/
b uninstall config.install.root=/tmp/cpinstall/
bdep deinit
bdep config remove @debug
bdep deinit @sanitized
kitty --session /home/ultracode/.etc/kitty/session.conf
title cosac
nix-env -qaA --description nixpkgs.kitty
nix-env -qa kitty
kitty + list-fonts --psnames | grep Fira
kitty list-fonts
b configure config.import.liberrors=../../liberrors/
x-terminal-emulator --start-as=fullscreen
b configure: ../../builds/sanitized/ds/ config.import.liberrors=../../liberrors/
sudo -v && wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sudo sh /dev/stdin
wget https://stage.build2.org/0/0.14.0-a.0/build2-install-0.14.0-a.0-stage.sh > build2-install-0.14.0-a.0-stage.sh
bdep status -i
bdep sync liberrors
bpkg rep-fetch
bpkg rep-info https://github.com/Ultra-Code/liberrors.git
Documents/FINANCIAL\ RECORDS
bpkg rep-fetch https://github.com/Ultra-Code/liberrors.git\#master
bdep status -a
bdep status -ar
bpkg rep-info https://github.com/Ultra-Code/liberrors.git\#master
b info
pkg-config glfw3 --libs --cflags
bdep sync '?sys:libglfw3-dev/*'
service --status-all
systemctl list-unit-files --state=enabled
free -h
service apparmor
systemd-analyze syscall-filter
systemd-analyze exit-status
bdep sync '?sys:pthread/*'
bdep deinit @thread-safe
bdep init -A ../builds/thread-safe/ @thread-safe -- -- '?sys:pthread/*'
bdep config remove @thread-safe
bdep init -A ../builds/thread-safe/ @thread-safe -- '?sys:pthread/*'
bdep sync @sanitized '?sys:libglfw3-dev/*' '?sys:libepoxy-dev/*'
bdep config remove @sanitized
bdep init -A ../builds/sanitized/ @sanitized -- '?sys:pthread/*'
bdep update @thread-safe
mount /var/lib/libvirt/images/debian_disk.img /mnt
sudo mount /var/lib/libvirt/images/debian_disk.img /mnt
sudo mount -t btrfs /var/lib/libvirt/images/debian_disk.img /mnt
sudo usermod -aG ultracode libvirt-qemu
groupmems
sudo du -h -d 1 .
update-alternatives --display x-session-manager
update-alternatives --display x-window-manager
update-alternatives --query x-terminal-emulator
fpath=($PWD)
b configure config.cxx.loptions=-L/home/ultracode/repos/cxx/build2/builds/
b configure config.cxx.libs='-ldl -l:libbacktrace.a'
b test
bdep new -t exe lost_config
b create gcc_config cc config.cxx=g++
b create gcc_config/ cc config.cxx=g++
b create: gcc_config/ cxx config.cxx=g++
b create: gcc_config/,cxx config.cxx=g++
b configure: lost_config/@gcc_config/
bdep update @gcc
bdep deinit @gcc
b configure: ../lost_config/@../gcc_config
bdep init -A ../gcc_config/ @gcc
bdep config remove @gcc
bdep init -C ../gcc/ cxx config.cxx=g++
b --version
bdep status -o
bdep fetch fmt
gnome-epub-thumbnailer
sh ./autogen.sh
make
checkinstall
sudo apt install ./gnome-epub-thumbnailer_1.6-1_amd64.deb
sudo apt-get --auto-remove remove gnome-books
sudo apt install gnome-books
sudo apt --install-recommends install gnome-books
nautilus -q
foliate
brew help info
brew list help
brew help list
brew analytics off
brew search zsh
nix-shell -p nix-info --run "nix-info -m"
sudo update-alternatives --config ld
sudo apt install --install-recommends libbackward-cpp-dev
b configure: config.cxx.libs = '-ldw -ldl'
brew taps
nix-env -qa
nix-env -qa | rg "neovim"
nix-env -qa | rg "langserver"
nix-env -qA | rg neovim
nix-env -qaA
nix-env --description -qa
nix-env -qaP '.*emacs.*'\
nix -u search  emacs
nix-channel --add https://nixos.org/channels/nixos-unstable nix_unstable
brew info hello
rename 's/.mxx/.hxx/' src/*.mxx
pkg-config --cflags --libs egl
nix-shell -p glxinfo --run "glxinfo"
nix-channel --add https://github.com/guibou/nixGL/archive/master.tar.gz nixgl && nix-channel --update
nixGLIntel $(nix run nixpkgs.glxinfo -c glxinfo) | grep -i 'OpenGL version string'
nix-store --query --references $(which nixGLIntel)
patchelf --set-rpath /lib:/lib64 ~/.nixpkgs/libGL.so.1.7.0
sudo systemctl start libvirt-guests.service
sudo systemctl start virtlockd.service
sudo systemctl start libvirtd-tcp.socket
journalctl -xe
update-desktop-database
printenv XDG_DATA_DIRS
sudo update-desktop-database -v ~/.nix-profile/share/applications/
NIX_PATH="nixpkgs=https://github.com/NixOS/nixpkgs/archive/release-21.05.tar.gz"
nix-shell shell.nix
npm audit fix
title exec
frontends/HealthManagement
clear
sh -c "$(curl -fsSL https://raw.githubusercontent.com/zdharma/zinit/master/doc/install.sh)"
sudo umount /mnt
sudo systemctl set-default multi-user.target
nix-env --version
nix-env -e cppcheck
sudo systemctl set-default graphical.target
sudo aptitude update
sudo apt policy cppcheck
sudo apt policy
sudo apt list cppcheck
sudo apt install libavutil56=7:4.3.2-0+deb11u2
sudo groupdel -f nixbld
sudo deluser nixbld1
sudo dpkg-reconfigure locales
env | grep LC
ip a
nmcli radio wifi
nmcli device show
nmcli connection show
nmcli device disconnect wlo1
nmcli radio wifi off
nmcli radio wifi on
nmcli device wifi list
nmcli connection delete Ultra\ Malpha
nmcli device status
nmcli device wifi connect Ultra\ Malpha
nmcli -ask device wifi connect Ultra\ Malpha
nmtui
nix search -u nix_unstable.luaformatter
nix search stylua
npm --help
nix-env -iA nixpkgs.luaformatter
nix-channel --remove nixpkgs
nix-channel --add https://nixos.org/channels/nixos-unstable nix
nix-env -qa --installed "*"
nix-env -e stylua
nix-env -iA nixpkgs.stylua
nix search -u luaformatter
nix-env -iA nix.stylua
nix-store --gc --print-dead
nix-store --gc
nix-collect-garbage -d
nix search luaformatter
printenv NIX_PATH
plugrc/init.lua
nvim -u NONE -U NONE -N -i NONE nvim/lua/plugins.lua\
sudo networkctl up wlo1
sysctl vm/dirty_expire_centisecs
sysctl vm/swappiness
curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
prettier --write src/components/nav/Header.vue
p10k configure
npm upgrade
prettier --write src/
