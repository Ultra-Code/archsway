$runtime:elvish-path
(gcc -print-prog-name=cc1plus) -v # asks gcc which C++ preprocessor it is using, and then asks that preprocessor where it looks for includes use `cc1` for the c preprocessor
(which sshd) -Dddd -p 62226
/bin/mount -fav ; sudo findmnt --verify --verbose
BROWSER=firefox man -H
CC=clang CXX=clang++ cmake -DCMAKE_BUILD_TYPE=Release -GNinja -DZIG_NO_LIB=ON ..
LIBGL_ALWAYS_SOFTWARE=true kitty
MESA_LOADER_DRIVER_OVERRIDE=d3d12 __EGL_VENDOR_LIBRARY_FILENAMES=/usr/share/glvnd/egl_vendor.d/50_mesa.json kitty
adb connect 192.168.70.113:38877
adb devices -l
adb pair 192.168.70.113:43579 # https://developer.android.com/tools/adb
adb push -p --sync -z zstd '/mnt/c/Users/b.assan/Downloads/TrendiMerchantV10 2.apk' /sdcard/Download
adb shell
aria2c -x2 -c -i movies.txt
asciinema play elvish_completion_take_20sec.cast
asciinema upload elvish_completion_take_20sec.cast
bg %1
bsdtar --auto-compress --option="zstd:compression-level=22,zstd:threads=0" --exclude-vcs --exclude-from .gitignore -cvf asm.tar.zst cal/ make/ newasm
bun install --global bash-language-server
cal 08 2023
cal 11 2022
cal 9 2022
cargo --list
cargo add ferris-says@0.2
cargo build --package asm-lsp --lib
cargo build --release
cargo clean
cargo clippy --workspace
cargo install --list
cargo install --path helix-term --locked
cargo new --help
cargo new ferrous --vcs none
cargo package --list --allow-dirty
cargo run
cargo test
cargo tree --duplicates
cargo tree --edges features --invert chrono
cargo tree --edges features --package chrono
cargo xtask docgen
chafa --format=sixels ~/files/Pictures/47.jpg
chafa --symbols ~/files/Pictures/47.jpg
chown -R www-data:www-data storage
clang -g -nostartfiles -o main.clang main.bc
clang++ -g -std=c++2b -fsanitize=address,bounds recursion.cxx -o exe
cmake -DCMAKE_BUILD_TYPE=Release -DZIG_NO_LIB=ON -GNinja -S ..
cmake .. -DCMAKE_INSTALL_PREFIX=$E:XDG_LOCAL_HOME/llvm19-debug -DCMAKE_PREFIX_PATH=$E:XDG_LOCAL_HOME/llvm19-debug -DCMAKE_BUILD_TYPE=Debug -DLLVM_ENABLE_LIBXML2=OFF -DLLVM_ENABLE_LIBEDIT=OFF -DLLVM_PARALLEL_LINK_JOBS=(nproc) -DLLVM_PARALLEL_COMPILE_JOBS=(nproc) -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_ENABLE_LIBCXX=OFF -DLLVM_ENABLE_MODULES=OFF -DLLVM_USE_LINKER=mold -DLLVM_ENABLE_LTO=OFF -DLLVM_ENABLE_BACKTRACES=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_CRASH_OVERRIDES=OFF -DLLVM_ENABLE_LIBPFM=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_PLUGINS=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF -DLLVM_BUILD_UTILS=OFF -DLLVM_BUILD_TOOLS=OFF -DLLVM_BUILD_STATIC=OFF -DLLVM_INCLUDE_UTILS=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_INCLUDE_DOCS=OFF -DLLVM_TOOL_LLVM_LTO2_BUILD=OFF -DLLVM_TOOL_LLVM_LTO_BUILD=OFF -DLLVM_TOOL_LTO_BUILD=OFF -DLLVM_TOOL_REMARKS_SHLIB_BUILD=OFF -DLLVM_STATIC_LINK_CXX_STDLIB=ON -DLLVM_TARGETS_TO_BUILD="X86;AArch64;RISCV" -DCMAKE_CXX_STANDARD=26 -G Ninja #Build LLVM only in debug mode
cmake .. -DCMAKE_INSTALL_PREFIX=$E:XDG_LOCAL_HOME/llvm19-debug -DCMAKE_PREFIX_PATH=$E:XDG_LOCAL_HOME/llvm19-debug -DCMAKE_BUILD_TYPE=Debug -DLLVM_ENABLE_LIBXML2=OFF -DLLVM_ENABLE_TERMINFO=OFF -DLLVM_ENABLE_LIBEDIT=OFF -DLLVM_PARALLEL_LINK_JOBS=(nproc) -DLLVM_PARALLEL_COMPILE_JOBS=(nproc) -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++  -DLLVM_ENABLE_LIBCXX=ON -DLLVM_ENABLE_MODULES=ON -DLLVM_USE_LINKER=mold -DLLVM_ENABLE_LTO=OFF -DLLVM_ENABLE_BACKTRACES=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_CRASH_OVERRIDES=OFF -DLLVM_ENABLE_LIBPFM=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_PLUGINS=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF -DLLVM_BUILD_UTILS=OFF -DLLVM_BUILD_TOOLS=OFF -DLLVM_BUILD_STATIC=ON -DLLVM_INCLUDE_UTILS=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_INCLUDE_DOCS=OFF -DLLVM_TOOL_LLVM_LTO2_BUILD=OFF -DLLVM_TOOL_LLVM_LTO_BUILD=OFF -DLLVM_TOOL_LTO_BUILD=OFF -DLLVM_TOOL_REMARKS_SHLIB_BUILD=OFF -DCLANG_BUILD_TOOLS=OFF -DCLANG_INCLUDE_DOCS=OFF -DCLANG_INCLUDE_TESTS=OFF -DCLANG_ENABLE_ARCMT=ON -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD=OFF -DCLANG_TOOL_CLANG_LINKER_WRAPPER_BUILD=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD=OFF -DCLANG_TOOL_LIBCLANG_BUILD=OFF -DLIBCLANG_BUILD_STATIC=ON -DLLD_BUILD_TOOLS=OFF -G Ninja #Build all llvm to be review for when building llvm in full with lld and clang projects enabled
cmake .. -DCMAKE_INSTALL_PREFIX=$E:XDG_LOCAL_HOME/llvm19-debug -DCMAKE_PREFIX_PATH=$E:XDG_LOCAL_HOME/llvm19-debug -DCMAKE_BUILD_TYPE=Release -DLLVM_PARALLEL_LINK_JOBS=1 -DCMAKE_CXX_STANDARD=23 -DLLD_BUILD_TOOLS=OFF # build lld in release and link to debug llvm
cmake .. -DCMAKE_INSTALL_PREFIX=$E:XDG_LOCAL_HOME/llvm19-debug-modules -DCMAKE_PREFIX_PATH=$E:XDG_LOCAL_HOME/llvm19-debug-modules -DCMAKE_BUILD_TYPE=Debug -DLLVM_ENABLE_LIBXML2=OFF -DLLVM_ENABLE_LIBEDIT=OFF -DLLVM_PARALLEL_LINK_JOBS=(nproc) -DLLVM_PARALLEL_COMPILE_JOBS=(nproc) -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_ENABLE_LIBCXX=ON -DLLVM_ENABLE_MODULES=ON -DLLVM_USE_LINKER=mold -DLLVM_ENABLE_LTO=OFF -DLLVM_ENABLE_BACKTRACES=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_ENABLE_CRASH_OVERRIDES=OFF -DLLVM_ENABLE_LIBPFM=OFF -DLLVM_ENABLE_OCAMLDOC=OFF -DLLVM_ENABLE_PLUGINS=OFF -DLLVM_ENABLE_Z3_SOLVER=OFF -DLLVM_BUILD_UTILS=OFF -DLLVM_BUILD_TOOLS=OFF -DLLVM_BUILD_STATIC=OFF -DLLVM_INCLUDE_UTILS=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_INCLUDE_DOCS=OFF -DLLVM_TOOL_LLVM_LTO2_BUILD=OFF -DLLVM_TOOL_LLVM_LTO_BUILD=OFF -DLLVM_TOOL_LTO_BUILD=OFF -DLLVM_TOOL_REMARKS_SHLIB_BUILD=OFF -DLLVM_STATIC_LINK_CXX_STDLIB=ON -DLLVM_TARGETS_TO_BUILD="X86;AArch64;RISCV" -DCMAKE_CXX_STANDARD=26 -G Ninja #Build LLVM only in debug mode
composer create-project laravel/laravel laralearn
composer global info
composer global list
composer global require "phpactor/phpactor:2023.12.03.0"
composer global require laravel/pint
composer global status
composer global update symfony/console
composer global upgrade
composer init
composer install
composer require --dev phpstan/phpstan
coredumpctl debug
coredumpctl dump
coredumpctl info
coredumpctl list
curl -L -# -o pretty-php.phar https://github.com/lkrms/pretty-php/releases/latest/download/pretty-php.phar
curl -O https://raw.githubusercontent.com/nothings/stb/master/stb_image.h
curl icanhazip.com
date -d '+2 Month Saturday'
date -d 'next Wed'
docker compose config
docker compose down
docker compose logs app
docker compose ps
docker compose restart nginx php-appdocker exec --user postgres -it php-app /bin/sh
docker exec -it nginx 'curl php-app:9000'
docker exec -it nginx /bin/sh
docker exec -it php-app 'ss -tunlp'
docker exec -u 0 -it pgadmin /bin/sh
docker exec -v dbdata:/var/lib/postgresql/data postgres:16.1-alpine sh
docker images
docker info
docker inspect pgsql | grep IP
docker kill mysql
docker logs
docker logs postgress-db
docker network inspect docker_default
docker network ls
docker ps
docker ps -a
docker restart nginx
docker rm pgsql
docker rmi bc861cf238f2
docker run -i --rm postgres:16.1-alpine cat /usr/local/share/postgresql/postgresql.conf.sample > docker/postgres.conf
docker run -it --rm -v /:/host archlinux:latest /bin/bash
docker run -it --rm alpine
docker run -it --rm alpine sh -c "echo Im in arch docker"
docker run -it --rm php:8.3-fpm-alpine cat /etc/group | grep www
docker run -it -u postgres -v dbdata:/var/lib/postgresql/data postgres:16.1-alpine sh
docker system prune -a
docker volume inspect docker_dbdata
docker volume ls
docker volume rm docker_dbdata
docker volume update
e_inline_xattr,sb_checksum,compression /dev/sdb2
ea
echo (styled warning: red) bumpy road
ee
env RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup RUSTUP_UPDATE_ROOT=https://mirrors.tuna.tsinghua.edu.cn/rustup rustup update
eq (uname) Linux
eval (ssh-agent -t1d)
exec
exit
fc -RI
fc-cache -v
fc-list | grep "Jet" | grep "Regular" | grep "Mono [^(NL)]"
fc-match mono
ffmpeg -i 'input'  -filter:a volumedetect -f null /dev/null
find ~/.local/zig -maxdepth 1 -ctime +3 -type d -name "*-dev.*" -exec rm -rf '{}' + stdout>$os:dev-null
functions precmd
g++ -E -Wp,-v -xc++ /dev/null
gcc --print-file-name=libgcc.a
gcc --print-file-name=libgcc_s.so # startup files https://stackoverflow.com/a/16436294/12007740
getconf GNU_LIBC_VERSION
getfacl /dev/dri/card0
git branch --set-upstream-to=origin/master master
git fetch origin pull/1136/head:revive-translateC
git log --patch --reverse 3d8627719be00e39070eaca0ee5b599f2a877c5c..
git pull --force --strategy recursive --strategy-option theirs
git pull --rebase=merges upstream master
git pull upstream master:test_boundarray
git push --follow-tags
git push mywork learn_rust
git push origin fixes:master
git remote prune origin
git remote set-branches --add origin branch
git remote set-branches --no-add origin fix-spacing-templates ; git branch -d fix-spacing-templates ; git remote prune origin
git remote set-branches --no-add origin fix-spacing-templates ; git config --unset-all remote.origin.fetch ; git branch -d fix-spacing-templates
git remote show origin
git restore --source=12e8f86 fm/lf/clean_preview.zsh
git show v0.3.0
git submodule add git@github.com:LMDB/lmdb.git deps/lmdb
git switch revive-translateC
git tag -a v0.3.0
glxinfo |grep opengl
go clean -modcache
go install src.elv.sh/cmd/elvish@master
gpg --expert --edit-key "Ultra Code"
gpg --expert --full-generate-key "Ultra Code"
gpg --export --armor --output public-key.asc "Ultra Code"
gpg --export-secret-keys "Ultra Code" | gpg --list packets
gpg --export-secret-keys --armor --output private-key.asc "Ultra Code"
gpg --export-ssh-key "Ultra Code"
gpg --gen-revoke --armor --output revoke-cert.asc "Ultra Code"
gpg --import privake-key.asc
gpg --keyserver keys.openpgp.org --recv-keys CA7C2C7A30C8E8E1274A847651C67305FFC2E5C0
gpg --keyserver-options auto-key-retrieve --verify archlinux-2024.03.01-x86_64.iso.sig archlinux-2024.03.01-x86_64.iso
gpg --list-keys --fingerprint 06BC317B515ACE7C
gpg --list-keys --with-keygrip
gpg --list-secret-keys --keyid-format=long
gpg --list-secret-keys --with-subkey-fingerprint
gpg --symmetric --s2k-cipher-algo AES256 --s2k-digest-algo SHA512 --s2k-count 65536 altgpgkeys.gz
gpg-connect-agent reloadagent /bye >/dev/null
gpg-connect-agent updatestartuptty /bye >/dev/null
gpgconf --list-options gpg-agent
grep 9000 /etc/services
gsettings list-recursively org.gnome.desktop.interface
helix --health toml
ip a
ip route
iwctl station wlp2s0 connect "Ultra Malpha"
iwctl station wlp2s0 get-hidden-networks
iwctl station wlp2s0 scan ; iwctl station wlp2s0 get-networks
journalctl
journalctl --disk-usage
journalctl --field _TRANSPORTnalctl -p err..alert
journalctl --list-boots
journalctl --list-catalog
journalctl --no-pager --help |grep pid
journalctl --no-pager -g failed /usr/bin/dockerd
journalctl --vacuum-size=3M
journalctl -a _TRANSPORT=syslog -g sshd
journalctl -af _TRANSPORT=audit
journalctl -b 0 -n 30 -r -u "docker*"
journalctl -b 0 -o short | grep 'swap|zram'
journalctl -b 0 -p warning..emerg
journalctl -b 0 -u systemd-journald -o cat
journalctl -k -p4
journalctl -r --identifier=sway
journalctl -t kernel
journalctl -t sway
journalctl -xe
journalctl SYSLOG_FACILITY=9
journalctl _PID=421
kitten icat ~/files/Pictures/108.jpg
kitty +kitten themes
kitty +list-fonts --psnames | grep "Iosevka Term"
ld -o mainllc.ld -dynamic-linker /lib64/ld-linux-x86-64.so.2 mainllc.o -lc
ldd --version
llc -O0 -filetype=obj -relocation-model=pic main.bc -o mainllc.o
loginctl session-status
make
make install
make uninstall
makepkg --clean -f
makepkg --install
makepkg --printsrcinfo > .SRCINFO
makepkg --syncdeps --rmdeps
makoctl dismiss all
mariadb -u ultracode -p < Downloads/access_to_basic_services.sql
math:pow 10 3
mkinitcpio -H resume
modinfo zram
modular update nightly/mojo
mpv --show-profile=gpu-hq
mpv --vo=help
nft -cf ~/serverdotfiles/nftables.new.conf
nft describe icmp code
nft describe icmp type
nft describe icmpv6 code
nft describe icmpv6 type
ninja install
nohup ssh kekele -L 127.0.0.1:3333:102.211.186.199:63333 -N stdout>/dev/null &
notify-send -u critical -t 2000 -e 'Screenshot taken'
num 0xfffff
objcopy -v --add-gnu-debuglink=mode.debug mode
objcopy -v --only-keep-debug mode mode.debug
p10k configure
pacman --noconfirm --root /host -Syu pacman
php -S localhost:8000 -t src/
php artisan serve &
ping 102.211.186.199 -c 4
pkg-config --cflags --libs glfw3
pkill --signal KILL pueued
poetry add jupyterlab
poetry add pytest --group dev
poetry config --list
poetry env info
poetry env use /bin/pypy3
poetry init
poetry install
poetry new --src Learning
poetry run jupyter lab &
poetry run jupyter lab list
poetry run jupyter lab stop
poetry run python src/mysql_connector.py
poetry shell
poetry show --outdated
poetry show --tree --outdated
ps -e | grep 191588
ps -oppid,state,nice,tty,cmd,priority,time,pid,%cpu,%mem,times -p 191594
ps aux | grep 'Z|defunct'whatis futex
ps aux | grep ssh
pylint --enable-all-extensions --enable=all --generate-toml-config > pylint.toml
pylint --help-msg=docstring-first-line-empty
pylint --list-group
pylint --list-msgs-enabled
readlink /bin/rustc 
rename --verbose --interactive build build2 hashing/**
resolvectl
resolvectl query 1.1.1.1
rfkill unblock bluetooth ; bluetoothctl power on ; bluetoothctl connect 78:15:2D:27:4B:9F
riverctl spawn 'batsignal -w 25 -c 18 -d 12 -f 85 -m 180 -D "systemctl suspend" -b'
rsync --info=ALL -zr Videos/Holywood Videos/looney_tunes/ Videos/Panda/ Videos/Series/ isaac@192.168.8.102:~/Windows/
rustlings run iterators
rustup component add rust-analyzer
rustup component list | grep installed
rustup default nightly
rustup doc
rustup doc --book
rustup doc --std
rustup help
rustup man cargo
rustup run nightly rustc --version
rustup run rustc
rustup self update 
rustup set profile default 
rustup show
rustup target list
rustup toolchain help
rustup toolchain install nightly
rustup toolchain list
rustup which --toolchain=nightly rust-analyzer
scp -Cr Videos/BOLLYWOOD/ isaac@192.168.8.102:~/Windows/
scp -r -P 62226 kekele@102.211.186.199:/home/kekele/.ssh remotessh
scp kekele:"firewalld.rules.conf*" serverdotfiles
scp ~/serverdotfiles/nftables.new.conf kekele:nftables.conf
sea-orm-cli generate entity -o entity_dir --with-serde deserialize --with-prelude=all-allow-unused-imports
sea-orm-cli migrate generate table_name --universal-time
ss --tcp --udp --listening --processes --numeric
ssh -G localhost
ssh kekele -L 127.0.0.1:8080:102.211.186.199:63333 -N
ssh kekele@102.211.186.199 -p 62226
ssh kekele@102.211.186.199 -p 62226 -L 127.0.0.1:3333:102.211.186.199:63333 -N
ssh-add -l -E sha256
ssh-copy-id -i ~/.ssh/id_ed25519.pub -p 62226 kekele@102.211.186.199
ssh-keygen -t ed25519 -C "mega.alpha100@gmail.com"
str:join ',' ['hello' world]
strace -f -s 1024 -e open ls
strip mode
su -l $USER #relogin as $USER , loading all groups and changes
sudo bootctl list
sudo btrfs filesystem df /
sudo btrfs subvolume create /ultracode
sudo btrfs subvolume delete /rootfs
sudo btrfs subvolume list /
sudo btrfs subvolume list /rootfs
sudo btrfs subvolume snapshot /mnt/ /rootfs
sudo dmidecode -t bios
sudo dmidecode -t system
sudo dockerd -D -l debug
sudo libinput debug-events --show-keycodes
sudo mkfs.f2fs -l GNUPG -e "mp3,gif,mov,png,jpg,jpeg,mpeg,svg,mkv,webm,mp4,m4v,avi" -E "*" -O encrypt,extra_attr,inode_checksum,flexibl
sudo mkinitcpio -p linux-zen
sudo modinfo -p i915
sudo mount --mkdir -t f2fs -o compress_algorithm=zstd:9,compress_chksum,atgc,gc_merge,lazytime,discard,inline_xattr,f lush_merge,alloc_mode=reuse,checkpoint_merge,compress_chksum,compress_cache,inlinecrypt,atgc,age_extent_cache,errors=re mount-ro /dev/sdb2 /mnt/GNUPG
sudo nft add rule inet filter input tcp dport 62226 accept
sudo nft list ruleset
sudo nmap -sV -Pn --reason 102.211.186.199
sudo nmap -sV -Pn -p 62226,63333 --reason 102.211.186.199
sudo pacman -D --asdeps duktape
sudo pacman -S --debug pacman
sudo pacman -S --overwrite "*" libx11
sudo pacman -U ~/.local/share/makepkg/packages/zig-dev-bin-20220626-1-x86_64.pkg.tar.zst
sudo ss -tunlp
sudo sshd -T
sudo sshd -t
sudo systemctl daemon-reload
sudo systemctl kill -s HUP systemd-logind
sudo systemctl start dictd
sudo systemctl start reflector
sudo udevadm control --log-priority=debug
sudo udevadm control --reload
sudo udevadm trigger
sudo userdel ultracode
sudo usermod -aG docker firefox
swaymsg -rt get_inputs
swaymsg -rt get_tree | jq '.nodes[1].nodes[2] | {id : .id,type : .type ,orientation : .orientation , focused : .focused , layout : .layout , border : .border , name : .name ,window : .window , nodes : .nodes[0].nodes[0]}'
swaymsg -t command -- exec "iwctl station wlp2s0 disconnect 'Ultra Malpha'"
swaymsg -t command -- exec "rfkill unblock wlan"
swaymsg focus output "Seiko Epson Corporation EPSON PJ 0x00000101"
systemctl --user enable --now clean-nvim-backups.timer
systemctl --user import-environment WAYLAND_DISPLAY XDG_CURRENT_DESKTOP;systemctl --user daemon-reload;systemctl --user restart gammastep
systemd-analyze blame
systemd-analyze cat-config systemd/journald.conf
systemd-analyze critical-chain
systemd-cat -t btmp -p info tail -f /path/to/log
systemd-cgls
systemd-cgtop
top
udevadm info --attribute-walk --name=/dev/libmtp-1-2
udevadm info --attribute-walk --path=/sys/class/power_supply/ADP1
udevadm info --query=all --path=/sys/class/net/wlp2s0
udevadm info --query=path --name=/dev/sda4
udevadm monitor --udev --environment --property
udevadm test --action=add /sys/devices/virtual/block/zram0
udevadm test --action=change /sys/class/power_supply/ADP1
udevadm test-builtin net_id /sys/class/net/enp3s0
udevadm trigger --action=add --verbose --type=subsystems --subsystem-match=usb --attr-match=attribute="removable==1"
unshare --user --pid --map-root-user --mount-proc --fork bash
watchexec --shell=none --restart --watch src cargo run
xdg-mime default firefox.desktop application/pdf
xdg-mime query default application/epub
xdg-mime query filetype ~/.local/neorg/index.norg
xkbcli interactive-wayland
yt-dlp -S 'res:720' 'https://www.youtube.com/watch?v=lLv1s7rKeCM'
zgrep CONFIG_ZRAM_MULTI_COMP /proc/config.gz
zig build -Dtarget=x86_64-linux-gnu.2.34
zig build -Dtarget=x86_64-linux-musl -Doptimize=ReleaseSafe
zig build install --prefix ~/.local -Doptimize=ReleaseFast
zig build test --summary all
zig build-exe -fno-llvm -fno-lld -target aarch64-linux --show-builtin
zig build-exe -lc unique.zig
zig targets | from-json | put (all)[libc] | order | each { |target| put $target } (all)
zig targets | jq .libc
zig test -femit-bin=zigtest src/main.zig
zig test -fno-llvm -fno-lld file.zig --test-filter funcname
zig test lib/std/std.zig --zig-lib-dir lib --main-mod-path lib/std --test-filter "BoundedArray"
zig test src/main.zig
zig test src/packed_and_extern_struct.zig
zig translate-c -lc unique.c > unique.zig
zig-update
zig2 build-exe -fPIC -fno-lld -fno-stack-check --verbose-llvm-bc=main.bc -fno-emit-bin main.zig
zig3 build -p stage4 -Denable-llvm -Dno-lib
