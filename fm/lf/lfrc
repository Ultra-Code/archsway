# # interpreter for shell commands
set shell zsh
#
# # set '-eu' options for shell commands
# # These options are used to have safer shell commands. Option '-e' is used to
# # exit on error and option '-u' is used to give error for unset variables.
# # Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# # $fx variables contain names with '*' or '?' characters. However, this option
# # is used selectively within individual commands as it can be limiting at
# # times.
set shellopts '-euy'
#
# # set internal field separator (IFS) to "\n" for shell commands
# # This is useful to automatically split file names in $fs and $fx properly
# # since default file separator used in these variables (i.e. 'filesep' option)
# # is newline. You need to consider the values of these options and create your
# # commands accordingly.
set ifs "\n"
#
# # enable icons in lf
set icons true
#
# # leave some space at the top and the bottom of the screen
# set scrolloff 10
#
# # specify prefered cursor preview
# # To use the `dim` attribute instead of underline for the cursor in the preview pane -> "\033[7;2m"
# "\033[7;90m" -> Gray, "\033[7m" -> color of file
set cursorpreviewfmt "\033[7m"
#
# # Enable find to match at arbitrary position
set anchorfind false
#
# # Number of characters prompted for the find command.
set findlen 2
#
# # Jump to the first match after each keystroke during searching
set incsearch true
#
# # Apply filter pattern after each keystroke during filtering
set incfilter true
#
# # Scrolling can wrap around the file list
set wrapscroll true
#
# # use enter for shell commands
# map <enter> shell
#
# # execute current file (must be executable)
# map x $$f
# map X !$f
#
# # dedicated keys for file opener actions
# map o &mimeopen $f
# map O $mimeopen --ask $f
#
# # define a custom 'open' command
# # This command is called when current file is not a directory. You may want to
# # use either file extensions and/or mime types here. Below uses an editor for
# # text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*|*/json) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}
#
# # mkdir command. See wiki if you want it to select created dir
cmd mkdir %{{
    mkdir -p -- "$@"
    lf -remote "send $id select \"$@\""
}}
map a push :mkdir<space>
#
# # remap cut item
map x :cut
#
# # delete item
map d :delete
#

# # remap clear cut|yank
map L :clear
# # Enhanced rename command
# # unmap the default rename keybinding
map r

cmd rename-append :rename
cmd rename-prepend :rename; cmd-home
cmd rename-append-full :rename; cmd-end
cmd rename-change-name :rename; cmd-delete-home
cmd rename-complete :rename; cmd-end; cmd-delete-home

map Rn rename-append
map RI rename-prepend
map RA rename-append-full
map Rf rename-change-name
map RC rename-complete
#
# # Create a new folder with selected item(s)
cmd newfold ${{
    set -f
    read newd
    printf "Directory name: "
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}
map <a-n> newfold
#
# # Yank paths into your clipboard
cmd yank-dirname &{{dirname -- "$f" | head -c-1 | wl-copy}}
cmd yank-path &{{printf '%s' "$fx" | wl-copy}}
cmd yank-basename &{{basename -a -- $fx | head -c-1 | wl-copy}}
cmd yank-basename-without-extension &{{basename -a -- $fx | cut -d. -f1 | head -c-1 | wl-copy}}
map Yd yank-dirname
map Yp yank-path
map Yb yank-basename
map Y. yank-basename-without-extension
#
# # Select all files or directories in the current directory
cmd select-files &{{
    get_files() {
        if [ "$lf_hidden" = 'false' ]; then
            find "$PWD" -mindepth 1 -maxdepth 1 -type f -not -name '.*' -print0
        else
            find "$PWD" -mindepth 1 -maxdepth 1 -type f -print0
        fi |
        xargs -0 printf ' %q'
    }

    lf -remote "send $id :unselect; toggle $(get_files)"
}}

cmd select-dirs &{{
    get_dirs() {
        if [ "$lf_hidden" = 'false' ]; then
            find "$PWD" -mindepth 1 -maxdepth 1 -type d -not -name '.*' -print0
        else
            find "$PWD" -mindepth 1 -maxdepth 1 -type d -print0
        fi |
        xargs -0 printf ' %q'
    }

    lf -remote "send $id :unselect; toggle $(get_dirs)"
}}
# # define a custom 'rename' command without prompt for overwrite
# # cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# # map r push :rename<space>
#
# # make sure trash folder exists
# # %mkdir -p ~/.trash
#
# # move current file or selected files to trash folder
# # (also see 'man mv' for backup/overwrite options)
# cmd trash %set -f; mv $fx ~/.trash
#
# # define a custom 'delete' command
# # cmd delete ${{
# #     set -f
# #     printf "$fx\n"
# #     printf "delete?[y/n]"
# #     read ans
# #     [ "$ans" = "y" ] && rm -rf $fx
# # }}
#
# # use '<delete>' key for either 'trash' or 'delete' command
# # map <delete> trash
# # map <delete> delete
#
# # extract the current file with the right command
# # (xkcd link: https://xkcd.com/1168/)
cmd extract &{{
    filename=$(basename -a -- $f | cut -d. -f1 | head -c-1)
    mkdir -p $filename && cd $filename
    set -f
    case $f in
        *.gz|*.tgz) tar xzvf $f &;;
        *.xz|*.txz) tar xJvf $f &;;
        *.zst|*.tzst) bsdtar -xf $f &;;
        *.zip) bsdtar -xf $f &;;
        *.7z) bsdtar -xf $f &;;
        *.rar) 7z x $f &;;
    esac
}}
map Ex extract
#
# # compress current file or selected files with bsdtar
cmd compress &{{
    [ $#@ -lt 2 ] && lf -remote "send $id echoerr 'two args required .ie compressed file name and type eg. zst|xz|gz'"
    [ -n $1 ] && compressed_file=$1 || lf -remote "send $id echoerr 'compressed file name expected'"
    [ -n $2 ] && compression_type=$2 || lf -remote "send $id echoerr 'compressed file type expected zst|xz|gzip'"

    # separate files by spaces and remove pathnames
    files=${${(f)fx}:t}

    case $compression_type in
        gz|tgz)
            compressed_file="${1}".tgz
            bsdtar --gzip --option="gzip:compression-level=9" -cf $compressed_file $files &
        ;;
        xz|txz)
            compressed_file="${1}".txz
            bsdtar --xz --option="xz:compression-level=9,xz:threads=0" -cf $compressed_file $files &
        ;;
        zst|tzst)
            compressed_file="${1}".tzst
            bsdtar --zstd --option="zstd:compression-level=22,zstd:threads=0" -cf $compressed_file $files &
        ;;
        *)
            lf -remote "send $id echoerr 'compressed file type expected zst|xz|gzip'"
        ;;
    esac

    lf -remote "send $id :unselect;select $compressed_file"
    lf -remote "send $id echo compression of $compressed_file has started. Kindly wait"

    #https://unix.stackexchange.com/questions/76717/launch-a-background-process-and-check-when-it-ends
    wait
    lf -remote "send $id reload"
    lf -remote "send $id echo compression of $compressed_file done"
}}
cmd compress-files push :compress<space>
map Ca compress-files
#
# # zoixide intergration with lf
cmd z %{{
    result="$(zoxide query --exclude $PWD $@ | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}

cmd zi ${{
    result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}


# map f $vi $(fzf)

cmd fzf_jump ${{
    res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map <c-f> :fzf_jump

cmd fzf_search ${{
    res="$( \
        RG_PREFIX="grep --extended-regexp --color=always --recursive --line-number -I --exclude='.*' --exclude-dir='.git' --exclude-dir='*cache*' --ignore-case"
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
map <c-g> :fzf_search

#
# # Enable ability to render sixel images in preview
set sixel true

#
# # set path to the preview script
set previewer ~/.config/lf/preview.zsh

#
# # set path to preview cleanup file
set cleaner ~/.config/lf/clean_preview.zsh

cmd edit-config ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

map Ec edit-config

cmd reload-config ${{
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

map Rc reload-config

cmd toggle_preview %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1:5"
    else
        lf -remote "send $id :set preview true; set ratios 1:2:3"
    fi
}}

map zp toggle_preview

#
# A command to rename multiple files at the same time using your text editor to change the names.
# This command either works on selected files or non-hidden files in the current directory if you don't have any selection.
cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

#
# # Warn about nested instances
&[ $LF_LEVEL -eq 1 ] || lf -remote "send $id echoerr \"Warning: You're in a nested lf instance!\""
